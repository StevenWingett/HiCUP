#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use FindBin '$Bin';
use lib "$Bin/../";
use hicup_module;

###################################################################################
###################################################################################
##This file is Copyright (C) 2020, Steven Wingett (steven.wingett@babraham.ac.uk)##
##                                                                               ##
##                                                                               ##
##This file is part of HiCUP.                                                    ##
##                                                                               ##
##HiCUP is free software: you can redistribute it and/or modify                  ##
##it under the terms of the GNU General Public License as published by           ##
##the Free Software Foundation, either version 3 of the License, or              ##
##(at your option) any later version.                                            ##
##                                                                               ##
##HiCUP is distributed in the hope that it will be useful,                       ##
##but WITHOUT ANY WARRANTY; without even the implied warranty of                 ##
##MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                  ##
##GNU General Public License for more details.                                   ##
##                                                                               ##
##You should have received a copy of the GNU General Public License              ##
##along with HiCUP.  If not, see <http://www.gnu.org/licenses/>.                 ##
###################################################################################
###################################################################################


##########################################################
#Get user-supplied parameters
#Option variables
my %config = (
  help            => '',
  version => ''
);


my $config_result = GetOptions(
    "help"        => \$config{help},
    "version"     => \$config{version},
);
die "Could not parse options.\n" unless ($config_result);


if ( $config{help} ) {
    print while (<DATA>);
    exit(0);
}

if ( $config{version} ) {    #Print version and exit
    print "hicup2hicpipe v$hicup_module::VERSION\n";
    exit(0);
}

unless(@ARGV){
    print while (<DATA>);
    exit(0);
}


#Pass file names as command-line arguments
my @files = @ARGV;
foreach my $file (@files){
  
  chomp $file;
  
  print "Processing $file\n";
  
  if ($file =~ /\.gz$/){
    open (IN,"gunzip -c $file |") or die "Couldn't read $file : $!";  
  }
  elsif ($file =~ /\.bam$/) {
    open (IN,"samtools view $file |") or die "Couldn't read $file: $!";
  }
  else{
    open (IN, $file) or die "Could not open $file\n";
  }
  
  open (OUT, '>', "$file.raw") or die "Could not write to $file.raw : $!";
  print OUT "chr1\tcoord1\tstrand1\tchr2\tcoord2\tstrand2\n";
  
  while(<IN>){
    if(/^@/){    #Remove SAM header lines
      next;
    }
    
    my $readF = $_;
    my $readR = scalar <IN>;
    
    my $chromosomeF = (split(/\t/, $readF))[2];
    my $chromosomeR = (split(/\t/, $readR))[2];
    my $positionF = (split(/\t/, $readF))[3];
    my $positionR = (split(/\t/, $readR))[3];
    my $seqF = (split(/\t/, $readF))[9];
    my $seqR = (split(/\t/, $readR))[9];

    my $strandF;
    my $strandR;

    if(((split(/\t/,$readF))[1]) & 0x10){    #Analyse the SAM bitwise flag to determine strand
      $strandF = '-';    #Negative strand   
      $positionF = $positionF + length($seqF) - 1;
    }else{
      $strandF = '+';    #Positive strand
    }

    if(((split(/\t/,$readR))[1]) & 0x10){    #Analyse the SAM bitwise flag to determine strand
      $strandR = '-';    #Negative strand
      $positionR = $positionR + length($seqR) - 1;
    }else{
      $strandR = '+';    #Positive strand
    }

    print OUT "$chromosomeF\t$positionF\t$strandF\t$chromosomeR\t$positionR\t$strandR\n";
  }
  close IN;
  close OUT;
}

print "Processing complete\n";

exit (0);



__DATA__

HiCUP homepage: www.bioinformatics.babraham.ac.uk/projects/hicup

The hicup2hicpipe script converts HiCUP BAM/SAM files to a format compatible 
with Hicpipe (Hicpipe pages found at: http://compgenomics.weizmann.ac.il/tanay).

SYNOPSIS

hicup2hicpipe [OPTIONS]
hicup2hicpipe [SAM/BAM FILES]...

FUNCTION

HiCUP generates SAM/BAM files of mapped, filtered paired-end reads 
constituting the sequenced valid Hi-C di-tags. These may then be analysed by a 
variety of specialised tools, but before this is possible the datasets will 
need parsing into an appropriate format.

The hicup2hicpipe script converts HiCUP BAM/SAM files to a format compatible with 
Hicpipe, termed a RAW data format file. The fomrat comprises 6 columns for each
di-tag.

Column1: forward read chromosome name
Column2: forward read position
Column3: forward read strand (+ = positive strand, - = negative strand)
Column4: reverse read chromosome name 
Column5: reverse read position
Column6: reverse read strand (+ = positive strand, - = negative strand)

COMMAND LINE OPTIONS

--help         Print help message and exit
--version      Print the program version and exit

Full instructions on running the pipeline can be found at:
www.bioinformatics.babraham.ac.uk/projects/hicup

Steven Wingett, Babraham Institute, Cambridge, UK (steven.wingett@babraham.ac.uk)
